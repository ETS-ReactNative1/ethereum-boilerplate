{"version":3,"sources":["providers/MoralisDappProvider/context.js","providers/MoralisDappProvider/MoralisDappProvider.js","helpers/formatters.js","components/Blockie.jsx","components/Address/Address.jsx","helpers/networks.js","components/Account.jsx","hooks/useChain.js","components/Chains/Logos.jsx","components/Chains/Chains.jsx","components/ERC20Transfers/ERC20Transfers.jsx","hooks/useERC20Transfers.js","components/gstyles.js","components/Categories.jsx","components/Feed/components/Votes.jsx","components/Feed/components/Post.jsx","components/Feed/components/Posts.jsx","components/Feed/components/AddPost.jsx","components/Reputation.jsx","components/Feed/Feed.jsx","components/Main.jsx","components/Contract/Contract.jsx","App.jsx","index.js"],"names":["MoralisDappContext","React","createContext","MoralisDappProvider","children","useMoralis","web3","Moralis","user","useState","walletAddress","setWalletAddress","chainId","setChainId","contractABI","setContractABI","contractAddress","setContractAddress","categoryId","category","selectedCategory","setSelectedCategory","useEffect","onChainChanged","chain","onAccountsChanged","address","givenProvider","selectedAddress","get","Provider","value","useMoralisDapp","context","useContext","undefined","Error","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","currency","getEllipsisTxt","str","n","substr","length","Blockie","props","currentWallet","seed","toLowerCase","className","styles","height","display","gap","backgroundColor","borderRadius","alignItems","Address","setAddress","isClicked","setIsClicked","Copy","xmlns","width","viewBox","strokeWidth","stroke","fill","strokeLinecap","strokeLinejoin","cursor","onClick","navigator","clipboard","writeText","d","id","avatar","size","copyable","Check","networkConfigs","currencySymbol","blockExplorerUrl","wrapped","chainName","currencyName","rpcUrl","getExplorer","account","padding","justifyContent","text","color","Account","authenticate","isAuthenticated","logout","isModalVisible","setIsModalVisible","marginRight","scale","visible","footer","onCancel","bodyStyle","fontSize","fontWeight","marginTop","href","target","rel","SelectOutlined","type","signingMessage","useChain","isWeb3Enabled","enableWeb3","a","switchNetwork","code","config","addNetwork","alert","message","AvaxLogo","BSCLogo","ETHLogo","fillOpacity","item","fontFamily","button","border","menuItems","key","icon","Chains","selected","setSelected","newSelected","find","console","log","menu","e","map","Item","marginLeft","overlay","trigger","DownOutlined","ERC20Transfers","useMoralisWeb3Api","isInitialized","setERC20Transfers","fetchERC20Transfers","then","result","catch","getTokenTransfers","useERC20Transfers","columns","title","dataIndex","render","token","from","to","parseFloat","Units","FromWei","decimals","toFixed","hash","loading","dataSource","rowKey","record","transaction_hash","glStyles","card","boxShadow","Categories","categories","filter","selectCategory","mode","ItemGroup","Votes","postId","postVotes","setPostVotes","contractABIJson","JSON","parse","data","useMoralisQuery","query","equalTo","live","options","functionName","abi","params","_postId","executeFunction","getPostVotes","Post","post","contentId","postOwner","content","postContent","setPostContent","voteStatus","setVoteStatus","votes","contractProcessor","useWeb3ExecuteFunction","vote","direction","error","fetch","onSuccess","onError","extractUri","stringify","fetchIPFSDoc","ipfsHash","url","response","json","processContent","forEach","voter","up","getPostVoteStatus","actions","createElement","LikeFilled","LikeOutlined","DislikeFilled","DislikeOutlined","marginBottom","author","strong","src","margin","Posts","queryPost","fetchedPosts","reverse","havePosts","emptyResult","postResult","AddPost","ipfsProcessor","useMoralisFile","setTitle","setContent","contentUri","_parentId","_contentUri","_categoryId","success","saveFile","base64","btoa","saveIPFS","ipfsResult","_ipfs","onSubmit","preventDefault","addPost","placeholder","onChange","rows","Reputation","reputationValue","setReputation","_address","_categoryID","getReputation","Feed","showAddPost","setShowAddPost","shape","Main","queryCategories","fetchedCategories","maxWidth","Text","Typography","Contract","contractName","contractInfo","networks","responses","setResponses","displayedContractFunctions","useMemo","method","openNotification","description","notification","open","placement","onFormFinish","name","forms","getFieldsValue","isView","stateMutability","awaitReceipt","on","isLoading","receipt","transactionHash","layout","inputs","input","label","required","htmlType","event","attributes","Header","Layout","Footer","header","position","zIndex","background","borderBottom","headerRight","Logo","class","App","isServerInfo","isWeb3EnableLoading","overflow","theme","defaultSelectedKeys","path","textAlign","APP_ID","process","SERVER_URL","Application","appId","serverUrl","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.b7baf5f4.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst MoralisDappContext = React.createContext();\r\n\r\nexport default MoralisDappContext;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport MoralisDappContext from \"./context\";\r\n\r\n// this is the place to define global variables\r\nfunction MoralisDappProvider({ children }) {\r\n  // manage the global state of our dapp\r\n  const { web3, Moralis, user } = useMoralis();\r\n  const [walletAddress, setWalletAddress] = useState();\r\n  const [chainId, setChainId] = useState();\r\n\r\n  // these two values must be replaced with the ABI and ContractAddress, respectively.\r\n  const [contractABI, setContractABI] = useState(\r\n    '[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"categoryId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"}],\"name\":\"CategoryCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"contentUri\",\"type\":\"string\"}],\"name\":\"ContentAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"postOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"parentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"categoryId\",\"type\":\"bytes32\"}],\"name\":\"PostCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"postId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"postOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"reputationPostOwner\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"uint80\",\"name\":\"reputationVoter\",\"type\":\"uint80\"},{\"indexed\":false,\"internalType\":\"int40\",\"name\":\"postVotes\",\"type\":\"int40\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"up\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"reputationAmount\",\"type\":\"uint8\"}],\"name\":\"Voted\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_category\",\"type\":\"string\"}],\"name\":\"addCategory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_parentId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"_contentUri\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"_categoryId\",\"type\":\"bytes32\"}],\"name\":\"createPost\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_categoryId\",\"type\":\"bytes32\"}],\"name\":\"getCategory\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_contentId\",\"type\":\"bytes32\"}],\"name\":\"getContent\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_postId\",\"type\":\"bytes32\"}],\"name\":\"getPost\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"int72\",\"name\":\"\",\"type\":\"int72\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"_categoryID\",\"type\":\"bytes32\"}],\"name\":\"getReputation\",\"outputs\":[{\"internalType\":\"uint80\",\"name\":\"\",\"type\":\"uint80\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_postId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_reputationTaken\",\"type\":\"uint8\"}],\"name\":\"voteDown\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_postId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"_reputationAdded\",\"type\":\"uint8\"}],\"name\":\"voteUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]'\r\n  );\r\n  const [contractAddress, setContractAddress] = useState(\r\n    \"0x01973DB1524E7721f30125A8BC77c6e4A5281fc4\"\r\n  ); // \"0x01973DB1524E7721f30125A8BC77c6e4A5281fc4\"\r\n\r\n  // capture the current category that the user is in\r\n  // (selected and change no matter the component)\r\n  // in our final dapp, these categories will be different things\r\n  // for example: day0 selected reveals all the posts in that day\r\n  // other example: team0 selected\r\n  const [selectedCategory, setSelectedCategory] = useState({\r\n    categoryId: \"0x91\", // this is shorthand for the default\r\n    category: \"default\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    Moralis.onChainChanged(function (chain) {\r\n      setChainId(chain);\r\n    });\r\n\r\n    Moralis.onAccountsChanged(function (address) {\r\n      setWalletAddress(address[0]);\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  useEffect(() => setChainId(web3.givenProvider?.chainId));\r\n  useEffect(\r\n    () =>\r\n      setWalletAddress(\r\n        web3.givenProvider?.selectedAddress || user?.get(\"ethAddress\")\r\n      ),\r\n    [web3, user]\r\n  );\r\n\r\n  return (\r\n    <MoralisDappContext.Provider\r\n      value={{\r\n        walletAddress,\r\n        chainId,\r\n        selectedCategory,\r\n        setSelectedCategory,\r\n        contractABI,\r\n        setContractABI,\r\n        contractAddress,\r\n        setContractAddress,\r\n      }}\r\n    >\r\n      {children}\r\n    </MoralisDappContext.Provider>\r\n  );\r\n}\r\n\r\nfunction useMoralisDapp() {\r\n  const context = React.useContext(MoralisDappContext);\r\n  if (context === undefined) {\r\n    throw new Error(\"useMoralisDapp must be used within a MoralisDappProvider\");\r\n  }\r\n  return context;\r\n}\r\n\r\nexport { MoralisDappProvider, useMoralisDapp };\r\n","export const n6 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 6,\r\n});\r\nexport const n4 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"decimal\",\r\n  minimumFractionDigits: 0,\r\n  maximumFractionDigits: 4,\r\n});\r\n\r\nexport const c2 = new Intl.NumberFormat(\"en-us\", {\r\n  style: \"currency\",\r\n  currency: \"USD\",\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\n/**\r\n * Returns a string of form \"abc...xyz\"\r\n * @param {string} str string to string\r\n * @param {number} n number of chars to keep at front/end\r\n * @returns {string}\r\n */\r\nexport const getEllipsisTxt = (str, n = 6) => {\r\n  if (str) {\r\n    return `${str.substr(0, n)}...${str.substr(str.length - n, str.length)}`;\r\n  }\r\n  return \"\";\r\n};\r\n\r\nexport const tokenValue = (value, decimals) => (decimals ? value / Math.pow(10, decimals) : value);\r\n\r\n/**\r\n * Return a formatted string with the symbol at the end\r\n * @param {number} value integer value\r\n * @param {number} decimals number of decimals\r\n * @param {string} symbol token symbol\r\n * @returns {string}\r\n */\r\nexport const tokenValueTxt = (value, decimals, symbol) => `${n4.format(tokenValue(value, decimals))} ${symbol}`;\r\n","import Blockies from \"react-blockies\";\r\nimport { useMoralisDapp } from \"../providers/MoralisDappProvider/MoralisDappProvider\";\r\n\r\n/**\r\n * Shows a blockie image for the provided wallet address\r\n * @param {*} props\r\n * @returns <Blockies> JSX Elemenet\r\n */\r\n\r\nfunction Blockie(props) {\r\n  const { walletAddress } = useMoralisDapp();\r\n  if ((!props.address && !props.currentWallet) || !walletAddress) return null;\r\n\r\n  return (\r\n    <Blockies\r\n      seed={\r\n        props.currentWallet\r\n          ? walletAddress.toLowerCase()\r\n          : props.address.toLowerCase()\r\n      }\r\n      className=\"identicon\"\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport default Blockie;\r\n","import { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { useMoralisDapp } from \"../../providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\r\nimport Blockie from \"../Blockie\";\r\nimport \"./identicon.css\";\r\n\r\nconst styles = {\r\n  address: {\r\n    height: \"36px\",\r\n    display: \"flex\",\r\n    gap: \"5px\",\r\n    backgroundColor: \"rgba(255, 255, 255, 0.1)\",\r\n    borderRadius: \"9px\",\r\n    alignItems: \"center\",\r\n  },\r\n};\r\n\r\nfunction Address(props) {\r\n  const { walletAddress } = useMoralisDapp();\r\n  const [address, setAddress] = useState();\r\n  const [isClicked, setIsClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setAddress(props?.address || walletAddress);\r\n  }, [walletAddress, props]);\r\n\r\n  if (!address) return null;\r\n\r\n  const Copy = () => (\r\n    <svg\r\n      xmlns=\"http://www.w3.org/2000/svg\"\r\n      width=\"26\"\r\n      height=\"26\"\r\n      viewBox=\"0 0 24 24\"\r\n      strokeWidth=\"2\"\r\n      stroke=\"#1780FF\"\r\n      fill=\"none\"\r\n      strokeLinecap=\"round\"\r\n      strokeLinejoin=\"round\"\r\n      style={{ cursor: \"pointer\" }}\r\n      onClick={() => {\r\n        navigator.clipboard.writeText(address);\r\n        setIsClicked(true);\r\n      }}\r\n    >\r\n      <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n      <path d=\"M15 3v4a1 1 0 0 0 1 1h4\" />\r\n      <path d=\"M18 17h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h4l5 5v7a2 2 0 0 1 -2 2z\" />\r\n      <path d=\"M16 17v2a2 2 0 0 1 -2 2h-7a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2\" />\r\n      <title id=\"copy-address\">Copy Address</title>\r\n    </svg>\r\n  );\r\n\r\n  return (\r\n    <div style={{ ...styles.address, ...props.style }}>\r\n      {props.avatar === \"left\" && <Blockie address={address} size={7} />}\r\n      <p>{props.size ? getEllipsisTxt(address, props.size) : address}</p>\r\n      {props.avatar === \"right\" && <Blockie address={address} size={7} />}\r\n      {props.copyable && (isClicked ? <Check /> : <Copy />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Address;\r\n\r\nconst Check = () => (\r\n  <svg\r\n    width=\"24\"\r\n    height=\"24\"\r\n    viewBox=\"0 0 24 24\"\r\n    strokeWidth=\"3\"\r\n    stroke=\"#21BF96\"\r\n    fill=\"none\"\r\n    strokeLinecap=\"round\"\r\n    strokeLinejoin=\"round\"\r\n  >\r\n    <path stroke=\"none\" d=\"M0 0h24v24H0z\" fill=\"none\" />\r\n    <path d=\"M5 12l5 5l10 -10\" />\r\n    <title id=\"copied-address\">Copied!</title>\r\n  </svg>\r\n);\r\n","export const networkConfigs = {\r\n  \"0x1\": {\r\n    currencySymbol: \"ETH\",\r\n    blockExplorerUrl: \"https://etherscan.io/\",\r\n    wrapped: \"0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2\",\r\n  },\r\n  \"0x3\": {\r\n    currencySymbol: \"ETH\",\r\n    blockExplorerUrl: \"https://ropsten.etherscan.io/\",\r\n  },\r\n  \"0x4\": {\r\n    currencySymbol: \"ETH\",\r\n    blockExplorerUrl: \"https://kovan.etherscan.io/\",\r\n  },\r\n  \"0x2a\": {\r\n    currencySymbol: \"ETH\",\r\n    blockExplorerUrl: \"https://rinkeby.etherscan.io/\",\r\n  },\r\n  \"0x5\": {\r\n    currencySymbol: \"ETH\",\r\n    blockExplorerUrl: \"https://goerli.etherscan.io/\",\r\n  },\r\n  \"0x539\": {\r\n    chainName: \"Local Chain\",\r\n    currencyName: \"ETH\",\r\n    currencySymbol: \"ETH\",\r\n    rpcUrl: \"http://127.0.0.1:7545\",\r\n  },\r\n  \"0xa86a\": {\r\n    chainId: 43114,\r\n    chainName: \"Avalanche Mainnet\",\r\n    currencyName: \"AVAX\",\r\n    currencySymbol: \"AVAX\",\r\n    rpcUrl: \"https://api.avax.network/ext/bc/C/rpc\",\r\n    blockExplorerUrl: \"https://cchain.explorer.avax.network/\",\r\n  },\r\n  \"0x38\": {\r\n    chainId: 56,\r\n    chainName: \"Smart Chain\",\r\n    currencyName: \"BNB\",\r\n    currencySymbol: \"BNB\",\r\n    rpcUrl: \"https://bsc-dataseed.binance.org/\",\r\n    blockExplorerUrl: \"https://bscscan.com/\",\r\n    wrapped: \"0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\",\r\n  },\r\n  \"0x61\": {\r\n    chainId: 97,\r\n    chainName: \"Smart Chain - Testnet\",\r\n    currencyName: \"BNB\",\r\n    currencySymbol: \"BNB\",\r\n    rpcUrl: \"https://data-seed-prebsc-1-s1.binance.org:8545/\",\r\n    blockExplorerUrl: \"https://testnet.bscscan.com/\",\r\n  },\r\n  \"0x89\": {\r\n    chainId: 137,\r\n    chainName: \"Polygon Mainnet\",\r\n    currencyName: \"MATIC\",\r\n    currencySymbol: \"MATIC\",\r\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com/\",\r\n    blockExplorerUrl: \"https://explorer-mainnet.maticvigil.com/\",\r\n    wrapped: \"0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270\",\r\n  },\r\n  \"0x13881\": {\r\n    chainId: 80001,\r\n    chainName: \"Mumbai\",\r\n    currencyName: \"MATIC\",\r\n    currencySymbol: \"MATIC\",\r\n    rpcUrl: \"https://rpc-mumbai.matic.today/\",\r\n    blockExplorerUrl: \"https://mumbai.polygonscan.com/\",\r\n  },\r\n};\r\n\r\nexport const getNativeByChain = (chain) =>\r\n  networkConfigs[chain]?.currencySymbol || \"NATIVE\";\r\n\r\nexport const getChainById = (chain) => networkConfigs[chain]?.chainId || null;\r\n\r\nexport const getExplorer = (chain) => networkConfigs[chain]?.blockExplorerUrl;\r\n\r\nexport const getWrappedNative = (chain) =>\r\n  networkConfigs[chain]?.wrapped || null;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"helpers/formatters\";\r\nimport Blockie from \"./Blockie\";\r\nimport { Button, Card, Modal } from \"antd\";\r\nimport { useState } from \"react\";\r\nimport Address from \"./Address/Address\";\r\nimport { SelectOutlined } from \"@ant-design/icons\";\r\nimport { getExplorer } from \"helpers/networks\";\r\nconst styles = {\r\n  account: {\r\n    height: \"42px\",\r\n    padding: \"0 15px\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"fit-content\",\r\n    borderRadius: \"12px\",\r\n    backgroundColor: \"rgb(244, 244, 244)\",\r\n    cursor: \"pointer\",\r\n  },\r\n  text: {\r\n    color: \"#21BF96\",\r\n  },\r\n};\r\n\r\nfunction Account() {\r\n  const { authenticate, isAuthenticated, logout } = useMoralis();\r\n  const { walletAddress, chainId } = useMoralisDapp();\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n\r\n  if (!isAuthenticated) {\r\n    return (\r\n      <div\r\n        style={styles.account}\r\n        onClick={() => authenticate({ signingMessage: \"Hello World!\" })}\r\n      >\r\n        <p style={styles.text}>Authenticate</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div style={styles.account} onClick={() => setIsModalVisible(true)}>\r\n        <p style={{ marginRight: \"5px\", ...styles.text }}>\r\n          {getEllipsisTxt(walletAddress, 6)}\r\n        </p>\r\n        <Blockie currentWallet scale={3} />\r\n      </div>\r\n      <Modal\r\n        visible={isModalVisible}\r\n        footer={null}\r\n        onCancel={() => setIsModalVisible(false)}\r\n        bodyStyle={{\r\n          padding: \"15px\",\r\n          fontSize: \"17px\",\r\n          fontWeight: \"500\",\r\n        }}\r\n        style={{ fontSize: \"16px\", fontWeight: \"500\" }}\r\n        width=\"400px\"\r\n      >\r\n        Account\r\n        <Card\r\n          style={{\r\n            marginTop: \"10px\",\r\n            borderRadius: \"1rem\",\r\n          }}\r\n          bodyStyle={{ padding: \"15px\" }}\r\n        >\r\n          <Address\r\n            avatar=\"left\"\r\n            size={6}\r\n            copyable\r\n            style={{ fontSize: \"20px\" }}\r\n          />\r\n          <div style={{ marginTop: \"10px\", padding: \"0 10px\" }}>\r\n            <a\r\n              href={`${getExplorer(chainId)}/address/${walletAddress}`}\r\n              target=\"_blank\"\r\n              rel=\"noreferrer\"\r\n            >\r\n              <SelectOutlined style={{ marginRight: \"5px\" }} />\r\n              View on Explorer\r\n            </a>\r\n          </div>\r\n        </Card>\r\n        <Button\r\n          size=\"large\"\r\n          type=\"primary\"\r\n          style={{\r\n            width: \"100%\",\r\n            marginTop: \"10px\",\r\n            borderRadius: \"0.5rem\",\r\n            fontSize: \"16px\",\r\n            fontWeight: \"500\",\r\n          }}\r\n          onClick={() => {\r\n            logout();\r\n            setIsModalVisible(false);\r\n          }}\r\n        >\r\n          Disconnect Wallet\r\n        </Button>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Account;\r\n","import { networkConfigs } from \"helpers/networks\";\r\nimport { useMoralis } from \"react-moralis\";\r\n\r\nconst useChain = () => {\r\n  const { Moralis, isWeb3Enabled, enableWeb3 } = useMoralis();\r\n  async function switchNetwork(chain) {\r\n    if (isWeb3Enabled) {\r\n      try {\r\n        await Moralis.switchNetwork(chain);\r\n      } catch (error) {\r\n        if (error.code === 4902) {\r\n          try {\r\n            const config = networkConfigs[chain];\r\n            const { chainId, chainName, currencyName, currencySymbol, rpcUrl, blockExplorerUrl } =\r\n              config;\r\n            await Moralis.addNetwork(\r\n              chainId,\r\n              chainName,\r\n              currencyName,\r\n              currencySymbol,\r\n              rpcUrl,\r\n              blockExplorerUrl\r\n            );\r\n          } catch (error) {\r\n            alert(error.message);\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n      enableWeb3();\r\n    }\r\n  }\r\n  return { switchNetwork };\r\n};\r\n\r\nexport default useChain;\r\n","export const AvaxLogo = () => (\r\n  <svg\r\n    width=\"25\"\r\n    height=\"25\"\r\n    viewBox=\"0 0 30 30\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      d=\"M0 10C0 4.47715 4.47715 0 10 0H20C25.5228 0 30 4.47715 30 10V20C30 25.5228 25.5228 30 20 30H10C4.47715 30 0 25.5228 0 20V10Z\"\r\n      fill=\"#E84142\"\r\n    />\r\n    <path\r\n      d=\"M20.2914 15.3898C20.8111 14.4921 21.6497 14.4921 22.1693 15.3898L25.4056 21.0709C25.9252 21.9685 25.5 22.7008 24.4607 22.7008H17.941C16.9134 22.7008 16.4882 21.9685 16.9961 21.0709L20.2914 15.3898ZM14.0315 4.45277C14.5512 3.55513 15.378 3.55513 15.8977 4.45277L16.6182 5.75198L18.3189 8.74017C18.7323 9.59056 18.7323 10.5945 18.3189 11.4449L12.6142 21.3307C12.0945 22.1339 11.2323 22.6417 10.2756 22.7008H5.53942C4.50005 22.7008 4.07485 21.9803 4.59454 21.0709L14.0315 4.45277Z\"\r\n      fill=\"white\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const BSCLogo = () => (\r\n  <svg\r\n    width=\"25\"\r\n    height=\"25\"\r\n    viewBox=\"0 0 30 30\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      d=\"M0 10C0 4.47715 4.47715 0 10 0H20C25.5228 0 30 4.47715 30 10V20C30 25.5228 25.5228 30 20 30H10C4.47715 30 0 25.5228 0 20V10Z\"\r\n      fill=\"#F3BA2F\"\r\n    />\r\n    <path\r\n      d=\"M11.3588 13.5038L15 9.8625L18.6431 13.5056L20.7619 11.3869L15 5.625L9.24 11.385L11.3588 13.5038ZM5.625 15L7.74375 12.8812L9.8625 15L7.74375 17.1188L5.625 15ZM11.3588 16.4963L15 20.1375L18.6431 16.4944L20.7619 18.6122L15 24.375L9.24 18.615L9.23719 18.6122L11.3588 16.4963ZM20.1375 15L22.2563 12.8812L24.375 15L22.2563 17.1188L20.1375 15ZM17.1488 14.9981H17.1506V15L15 17.1506L12.8522 15.0037L12.8484 15L12.8522 14.9972L13.2281 14.6203L13.4109 14.4375L15 12.8494L17.1497 14.9991L17.1488 14.9981Z\"\r\n      fill=\"white\"\r\n    />\r\n  </svg>\r\n);\r\n\r\nexport const ETHLogo = () => (\r\n  <svg\r\n    width=\"25\"\r\n    height=\"25\"\r\n    viewBox=\"0 0 30 30\"\r\n    fill=\"none\"\r\n    xmlns=\"http://www.w3.org/2000/svg\"\r\n  >\r\n    <path\r\n      d=\"M0 10C0 4.47715 4.47715 0 10 0H20C25.5228 0 30 4.47715 30 10V20C30 25.5228 25.5228 30 20 30H10C4.47715 30 0 25.5228 0 20V10Z\"\r\n      fill=\"#627EEA\"\r\n    />\r\n    <path\r\n      d=\"M15.0294 3.75V12.0656L22.0578 15.2062L15.0294 3.75Z\"\r\n      fill=\"white\"\r\n      fillOpacity=\"0.602\"\r\n    />\r\n    <path d=\"M15.0294 3.75L8 15.2062L15.0294 12.0656V3.75Z\" fill=\"white\" />\r\n    <path\r\n      d=\"M15.0294 20.595V26.2453L22.0625 16.515L15.0294 20.595Z\"\r\n      fill=\"white\"\r\n      fillOpacity=\"0.602\"\r\n    />\r\n    <path d=\"M15.0294 26.2453V20.594L8 16.515L15.0294 26.2453Z\" fill=\"white\" />\r\n    <path\r\n      d=\"M15.0294 19.2872L22.0578 15.2063L15.0294 12.0675V19.2872Z\"\r\n      fill=\"white\"\r\n      fillOpacity=\"0.2\"\r\n    />\r\n    <path\r\n      d=\"M8 15.2063L15.0294 19.2872V12.0675L8 15.2063Z\"\r\n      fill=\"white\"\r\n      fillOpacity=\"0.602\"\r\n    />\r\n  </svg>\r\n);\r\n","import { useEffect, useState } from \"react\";\r\nimport useChain from \"hooks/useChain\";\r\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { Menu, Dropdown, Button } from \"antd\";\r\nimport { DownOutlined } from \"@ant-design/icons\";\r\nimport { AvaxLogo, BSCLogo, ETHLogo } from \"./Logos\";\r\n\r\nconst styles = {\r\n  item: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    height: \"42px\",\r\n    fontWeight: \"500\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    fontSize: \"14px\",\r\n    padding: \"0 10px\",\r\n  },\r\n  button: {\r\n    border: \"2px solid rgb(231, 234, 243)\",\r\n    borderRadius: \"12px\",\r\n  },\r\n};\r\n\r\nconst menuItems = [\r\n  {\r\n    key: \"0x1\",\r\n    value: \"Ethereum\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x539\",\r\n    value: \"Local Chain\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x3\",\r\n    value: \"Ropsten Testnet\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x4\",\r\n    value: \"Rinkeby Testnet\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x2a\",\r\n    value: \"Kovan Testnet\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x5\",\r\n    value: \"Goerli Testnet\",\r\n    icon: <ETHLogo />,\r\n  },\r\n  {\r\n    key: \"0x38\",\r\n    value: \"Binance\",\r\n    icon: <BSCLogo />,\r\n  },\r\n  {\r\n    key: \"0x61\",\r\n    value: \"Smart Chain Testnet\",\r\n    icon: <BSCLogo />,\r\n  },\r\n  {\r\n    key: \"0xa86a\",\r\n    value: \"Avalanche\",\r\n    icon: <AvaxLogo />,\r\n  },\r\n];\r\n\r\nfunction Chains() {\r\n  const { switchNetwork } = useChain();\r\n  const { chainId } = useMoralisDapp();\r\n  const [selected, setSelected] = useState({});\r\n\r\n  useEffect(() => {\r\n    if (!chainId) return null;\r\n    const newSelected = menuItems.find((item) => item.key === chainId);\r\n    setSelected(newSelected);\r\n    console.log(\"current chainId: \", chainId);\r\n  }, [chainId]);\r\n\r\n  const handleMenuClick = (e) => {\r\n    console.log(\"switch to: \", e.key);\r\n    switchNetwork(e.key);\r\n  };\r\n\r\n  const menu = (\r\n    <Menu onClick={handleMenuClick}>\r\n      {menuItems.map((item) => (\r\n        <Menu.Item key={item.key} icon={item.icon} style={styles.item}>\r\n          <span style={{ marginLeft: \"5px\" }}>{item.value}</span>\r\n        </Menu.Item>\r\n      ))}\r\n    </Menu>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Dropdown overlay={menu} trigger={[\"click\"]}>\r\n        <Button\r\n          key={selected?.key}\r\n          icon={selected?.icon}\r\n          style={{ ...styles.button, ...styles.item }}\r\n        >\r\n          <span style={{ marginLeft: \"5px\" }}>{selected?.value}</span>\r\n          <DownOutlined />\r\n        </Button>\r\n      </Dropdown>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chains;\r\n","import React from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"../../helpers/formatters\";\r\nimport { getExplorer } from \"../../helpers/networks\";\r\nimport \"antd/dist/antd.css\";\r\nimport { Skeleton, Table } from \"antd\";\r\nimport { useERC20Transfers } from \"hooks/useERC20Transfers\";\r\n\r\nfunction ERC20Transfers() {\r\n  const { ERC20Transfers, chainId } = useERC20Transfers();\r\n  const { Moralis } = useMoralis();\r\n\r\n  const columns = [\r\n    {\r\n      title: \"Token\",\r\n      dataIndex: \"address\",\r\n      key: \"address\",\r\n      render: (token) => getEllipsisTxt(token, 8),\r\n    },\r\n    {\r\n      title: \"From\",\r\n      dataIndex: \"from_address\",\r\n      key: \"from_address\",\r\n      render: (from) => getEllipsisTxt(from, 8),\r\n    },\r\n    {\r\n      title: \"To\",\r\n      dataIndex: \"to_address\",\r\n      key: \"to_address\",\r\n      render: (to) => getEllipsisTxt(to, 8),\r\n    },\r\n    {\r\n      title: \"Value\",\r\n      dataIndex: \"value\",\r\n      key: \"value\",\r\n      render: (value, item) => parseFloat(Moralis.Units.FromWei(value, item.decimals).toFixed(6)),\r\n    },\r\n    {\r\n      title: \"Hash\",\r\n      dataIndex: \"transaction_hash\",\r\n      key: \"transaction_hash\",\r\n      render: (hash) => (\r\n        <a href={`${getExplorer(chainId)}tx/${hash}`} target=\"_blank\" rel=\"noreferrer\">\r\n          View Transaction\r\n        </a>\r\n      ),\r\n    },\r\n  ];\r\n\r\n  let key = 0;\r\n  return (\r\n    <div style={{ width: \"65vw\", padding: \"15px\" }}>\r\n      <h1>💸ERC20 Transfers</h1>\r\n      <Skeleton loading={!ERC20Transfers}>\r\n        <Table\r\n          dataSource={ERC20Transfers}\r\n          columns={columns}\r\n          rowKey={(record) => {\r\n            key++;\r\n            return `${record.transaction_hash}-${key}`;\r\n          }}\r\n        />\r\n      </Skeleton>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ERC20Transfers;\r\n","import { useEffect, useState } from \"react\";\r\nimport { useMoralis, useMoralisWeb3Api } from \"react-moralis\";\r\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\n\r\nexport const useERC20Transfers = () => {\r\n  const { account } = useMoralisWeb3Api();\r\n  const { walletAddress, chainId } = useMoralisDapp();\r\n  const { isInitialized } = useMoralis();\r\n  const [ERC20Transfers, setERC20Transfers] = useState();\r\n\r\n  useEffect(() => {\r\n    if (isInitialized)\r\n      fetchERC20Transfers()\r\n        .then((result) => setERC20Transfers(result))\r\n        .catch((e) => alert(e.message));\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isInitialized, chainId, walletAddress]);\r\n\r\n  const fetchERC20Transfers = async () => {\r\n    return await account\r\n      .getTokenTransfers({ address: walletAddress, chain: chainId })\r\n      .then((result) => result.result)\r\n      .catch((e) => alert(e.message));\r\n  };\r\n  return { fetchERC20Transfers, ERC20Transfers, chainId };\r\n};\r\n","// this is an object that we can change as we need\r\n\r\nconst glStyles = {\r\n  card: {\r\n    boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n    backgroundColor: \"white\",\r\n    border: \"1px solid #e7eaf3\",\r\n    borderRadius: \"0.5rem\",\r\n    fontSize: \"16px\",\r\n    color: \"#1F3947\",\r\n  },\r\n};\r\nexport default glStyles;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { Menu } from \"antd\";\r\nimport glStyles from \"./gstyles\";\r\n\r\nconst Categories = ({ categories }) => {\r\n  const { setSelectedCategory } = useMoralisDapp();\r\n\r\n  //to basically change what category is selected\r\n  function selectCategory(categoryId) {\r\n    const selectedCategory = categories.filter(\r\n      (category) => category[\"categoryId\"] === categoryId\r\n    );\r\n    // this becomes a global value\r\n    console.log(selectedCategory[0]);\r\n    setSelectedCategory(selectedCategory[0]);\r\n  }\r\n\r\n  return (\r\n    <div className=\"col-lg-3\">\r\n      <Menu\r\n        onClick={(e) => selectCategory(e.key)}\r\n        style={{ ...glStyles.card, padding: \"10px 0\" }}\r\n        mode=\"inline\"\r\n      >\r\n        <Menu.ItemGroup key=\"categories\" title=\"Categories\">\r\n          {/* iterate through the queried categories */}\r\n          {categories.map((category) => (\r\n            <Menu.Item key={category[\"categoryId\"]}>\r\n              {category[\"category\"]}\r\n            </Menu.Item>\r\n          ))}\r\n        </Menu.ItemGroup>\r\n      </Menu>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Categories;\r\n","import { useState, useEffect } from \"react\";\r\n// for smart contract interactions (address & abi)\r\nimport { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\r\n\r\nconst Votes = ({ postId }) => {\r\n  const { Moralis } = useMoralis();\r\n  const [postVotes, setPostVotes] = useState(\"0\");\r\n  // standard functionality from global state (we do every time)\r\n  const { contractABI, contractAddress } = useMoralisDapp();\r\n  const contractABIJson = JSON.parse(contractABI);\r\n\r\n  // this data is the hook for new votes\r\n  const { data } = useMoralisQuery(\r\n    \"Votes\",\r\n    (query) => query.equalTo(\"postId\", postId),\r\n    [],\r\n    { live: true }\r\n  );\r\n  const options = {\r\n    contractAddress: contractAddress,\r\n    functionName: \"getPost\",\r\n    abi: contractABIJson,\r\n    params: {\r\n      _postId: postId,\r\n    },\r\n  };\r\n\r\n  // we want to update when there's more votes\r\n  // the data hook is from useMoralis Query\r\n  useEffect(() => {\r\n    async function getPostVotes() {\r\n      await Moralis.enableWeb3;\r\n      const result = await Moralis.executeFunction(options);\r\n      setPostVotes(result[3]);\r\n    }\r\n    getPostVotes();\r\n  }, [data]);\r\n\r\n  return <>{postVotes}</>;\r\n};\r\n\r\nexport default Votes;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\n// fetch the content from ipfs\r\nimport { useMoralisQuery, useWeb3ExecuteFunction } from \"react-moralis\";\r\nimport { useEffect, useState, createElement } from \"react\";\r\nimport { Comment, Tooltip, Avatar, message, Divider } from \"antd\";\r\nimport {\r\n  DislikeOutlined,\r\n  LikeOutlined,\r\n  DislikeFilled,\r\n  LikeFilled,\r\n} from \"@ant-design/icons\";\r\nimport Text from \"antd/lib/typography/Text\";\r\nimport Blockie from \"components/Blockie\";\r\nimport glStyles from \"components/gstyles\";\r\nimport Votes from \"./Votes\";\r\n\r\nconst Post = ({ post }) => {\r\n  const { contentId, postId, postOwner } = post;\r\n  // defining some constants post by post\r\n  const [postContent, setPostContent] = useState({\r\n    title: \"default\",\r\n    content: \"default\",\r\n  });\r\n  // data is where the Uri lives\r\n  const { data } = useMoralisQuery(\"Contents\", (query) =>\r\n    query.equalTo(\"contentId\", contentId)\r\n  );\r\n  const [voteStatus, setVoteStatus] = useState();\r\n\r\n  // checking for votes thats equal to the current user\r\n  const { data: votes } = useMoralisQuery(\r\n    \"Votes\",\r\n    (query) => query.equalTo(\"postId\", postId),\r\n    [],\r\n    {\r\n      live: true,\r\n    }\r\n  );\r\n\r\n  // contract execution constants\r\n  const { walletAddress, contractABI, contractAddress } = useMoralisDapp();\r\n  const contractABIJson = JSON.parse(contractABI);\r\n  const contractProcessor = useWeb3ExecuteFunction();\r\n\r\n  // bringing in ipfs may take a while, so we want a hook\r\n  // so that we rerender when we get new data? https://youtu.be/52BvLrj-KrE?t=4882\r\n  useEffect(() => {\r\n    // ExtractTheUri()\r\n    function extractUri(data) {\r\n      const fetchedContent = JSON.parse(JSON.stringify(data, [\"contentUri\"]));\r\n      const contentUri = fetchedContent[0][\"contentUri\"];\r\n      return contentUri;\r\n    }\r\n\r\n    // then we get from ipfs (fetches as json)\r\n    async function fetchIPFSDoc(ipfsHash) {\r\n      console.log(ipfsHash);\r\n      const url = ipfsHash;\r\n      const response = await fetch(url);\r\n      return await response.json();\r\n    }\r\n\r\n    // await the fetchIPFSdata() and ExtractTheUri()\r\n    async function processContent() {\r\n      const content = await fetchIPFSDoc(extractUri(data));\r\n      setPostContent(content);\r\n    }\r\n    if (data.length > 0) {\r\n      processContent();\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    // any votes for this post?\r\n    if (!votes?.length) return null;\r\n\r\n    async function getPostVoteStatus() {\r\n      const fetchedVotes = JSON.parse(JSON.stringify(votes));\r\n      fetchedVotes.forEach(({ voter, up }) => {\r\n        if (voter === walletAddress) setVoteStatus(up ? \"liked\" : \"disliked\");\r\n      });\r\n      return;\r\n    }\r\n\r\n    getPostVoteStatus();\r\n  }, [votes, walletAddress]);\r\n\r\n  async function vote(direction) {\r\n    if (walletAddress.toLowerCase() === postOwner.toLowerCase())\r\n      return message.error(\"You cannot vote on your posts\");\r\n    if (voteStatus) return message.error(\"Already voted, yo\");\r\n    const options = {\r\n      contractAddress: contractAddress,\r\n      functionName: direction,\r\n      abi: contractABIJson,\r\n      params: {\r\n        _postId: post[\"postId\"],\r\n        [direction === \"voteDown\" ? \"_reputationTaken\" : \"_reputationAdded\"]: 1,\r\n      },\r\n    };\r\n    await contractProcessor.fetch({\r\n      params: options,\r\n      onSuccess: () => console.log(\"success\"),\r\n      onError: (error) => console.error(error),\r\n    });\r\n  }\r\n\r\n  // actions like vote up or vote down\r\n  const actions = [\r\n    <Tooltip key=\"comment-basic-like\" title=\"Vote Up\">\r\n      <span\r\n        style={{\r\n          fontSize: \"15px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          marginRight: \"16px\",\r\n        }}\r\n        onClick={() => vote(\"voteUp\")}\r\n      >\r\n        {createElement(voteStatus === \"liked\" ? LikeFilled : LikeOutlined)} Vote\r\n        Up\r\n      </span>\r\n    </Tooltip>,\r\n    <span style={{ fontSize: \"15px\" }}>\r\n      <Votes postId={postId} />\r\n    </span>,\r\n    <Tooltip key=\"comment-basic-dislike\" title=\"Dislike\">\r\n      <span\r\n        style={{\r\n          fontSize: \"15px\",\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          marginLeft: \"8px\",\r\n        }}\r\n        onClick={() => vote(\"voteDown\")}\r\n      >\r\n        {createElement(\r\n          voteStatus === \"disliked\" ? DislikeFilled : DislikeOutlined\r\n        )}{\" \"}\r\n        Vote Down\r\n      </span>\r\n    </Tooltip>,\r\n  ];\r\n\r\n  const loading = \"\";\r\n\r\n  const result = (\r\n    // this is a post, not a comment...\r\n    <Comment\r\n      style={{ ...glStyles.card, padding: \"0px 15px\", marginBottom: \"10px\" }}\r\n      actions={actions}\r\n      author={<Text strong>{post[\"postOwner\"]}</Text>}\r\n      avatar={\r\n        <Avatar\r\n          src={<Blockie address={post[\"postOwner\"]} scale=\"4\" />}\r\n        ></Avatar>\r\n      }\r\n      content={\r\n        <>\r\n          <Text strong style={{ fontSize: \"20px\", color: \"#333\" }}>\r\n            {postContent[\"title\"]}\r\n          </Text>\r\n\r\n          {/* this part here is the styling of the post itself, \r\n          which currently isn't wrapping... 1 minute later it works */}\r\n\r\n          <p style={{ fontSize: \"15px\", color: \"#111\" }}>\r\n            {postContent[\"content\"]}\r\n          </p>\r\n          <Divider style={{ margin: \"15px 0\" }} />\r\n        </>\r\n      }\r\n    />\r\n  );\r\n  return postContent[\"title\"] === \"default\" ? loading : result;\r\n};\r\n\r\nexport default Post;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useMoralisQuery } from \"react-moralis\";\r\nimport Post from \"./Post\";\r\n\r\nconst Posts = () => {\r\n  const { selectedCategory } = useMoralisDapp();\r\n\r\n  // this is the event grabber, basically\r\n  const queryPost = useMoralisQuery(\r\n    \"Posts\",\r\n    (query) => query.equalTo(\"categoryId\", selectedCategory[\"categoryId\"]),\r\n    [selectedCategory],\r\n    { live: true }\r\n  );\r\n\r\n  // this reverses the order of the posts\r\n  const fetchedPosts = JSON.parse(\r\n    JSON.stringify(queryPost.data, [\"postId\", \"contentId\", \"postOwner\"])\r\n  ).reverse();\r\n  console.log(fetchedPosts);\r\n\r\n  // define via the length\r\n  const havePosts = fetchedPosts.length > 0 ? true : false;\r\n\r\n  const emptyResult = (\r\n    <div>\r\n      <h3> be the first to post here for</h3>\r\n      <h3>{selectedCategory[\"category\"]} </h3>\r\n    </div>\r\n  );\r\n\r\n  const postResult = (\r\n    <div>\r\n      {fetchedPosts.map((post) => (\r\n        <Post key={post[\"postId\"]} post={post} />\r\n      ))}\r\n    </div>\r\n  );\r\n\r\n  return havePosts ? postResult : emptyResult;\r\n};\r\n\r\nexport default Posts;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useMoralis, useMoralisFile } from \"react-moralis\";\r\nimport { useWeb3ExecuteFunction } from \"react-moralis\";\r\nimport { message } from \"antd\";\r\nimport { useState } from \"react\";\r\n\r\nconst AddPost = () => {\r\n  const { contractABI, contractAddress, selectedCategory } = useMoralisDapp();\r\n  // the way we store it as global variable is unusable\r\n  const contractABIJson = JSON.parse(contractABI);\r\n\r\n  // using IPFS to initialize an instance of uMF()\r\n  const ipfsProcessor = useMoralisFile();\r\n  const contractProcessor = useWeb3ExecuteFunction();\r\n\r\n  // the final import\r\n  const [title, setTitle] = useState(\"\");\r\n  const [content, setContent] = useState(\"\");\r\n\r\n  async function addPost(post) {\r\n    const contentUri = await processContent(post);\r\n    const categoryId = selectedCategory[\"categoryId\"];\r\n    const options = {\r\n      contractAddress: contractAddress,\r\n      functionName: \"createPost\",\r\n      abi: contractABIJson,\r\n      params: {\r\n        _parentId: \"0x91\",\r\n        _contentUri: contentUri,\r\n        _categoryId: categoryId, // this isn't implemented\r\n      },\r\n    };\r\n    await contractProcessor.fetch({\r\n      params: options,\r\n      onSuccess: () => message.success(\"success\"),\r\n      onError: (error) => message.error(error),\r\n    });\r\n  }\r\n\r\n  const processContent = async (content) => {\r\n    const ipfsResult = await ipfsProcessor.saveFile(\r\n      \"post.json\",\r\n      { base64: btoa(JSON.stringify(content)) },\r\n      { saveIPFS: true }\r\n    );\r\n    return ipfsResult._ipfs;\r\n  };\r\n\r\n  const validateForm = () => {\r\n    let result = !title || !content ? false : true;\r\n    return result;\r\n  };\r\n\r\n  const clearForm = () => {\r\n    setTitle(\"\");\r\n    setContent(\"\");\r\n  };\r\n\r\n  function onSubmit(e) {\r\n    e.preventDefault();\r\n    if (!validateForm()) {\r\n      return message.error(\"Remember to add a title and content of post\");\r\n    }\r\n    addPost({ title, content });\r\n    clearForm();\r\n  }\r\n  return (\r\n    <form onSubmit={onSubmit}>\r\n      <div className=\"row\">\r\n        <div className=\"form-group\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"mb-2 mt-2 form-control\"\r\n            placeholder=\"Title\"\r\n            value={title}\r\n            onChange={(e) => setTitle(e.target.value)}\r\n          />\r\n          <textarea\r\n            type=\"text\"\r\n            className=\"mb-2 form-control\"\r\n            placeholder=\"Post away\"\r\n            rows=\"5\"\r\n            value={content}\r\n            onChange={(e) => setContent(e.target.value)}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-dark \">\r\n          Submit\r\n        </button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default AddPost;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useMoralisQuery, useMoralis } from \"react-moralis\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst Reputation = () => {\r\n  const { Moralis } = useMoralis();\r\n  const { walletAddress, contractABI, contractAddress, selectedCategory } =\r\n    useMoralisDapp();\r\n  const [reputationValue, setReputation] = useState(0);\r\n  const contractABIJson = JSON.parse(contractABI);\r\n\r\n  const { data: votes } = useMoralisQuery(\r\n    \"Votes\",\r\n    (query) => query.equalTo(\"postOwner\", walletAddress),\r\n    [],\r\n    {\r\n      live: true,\r\n    }\r\n  );\r\n\r\n  const categoryId = selectedCategory[\"categoryId\"];\r\n\r\n  const options = {\r\n    contractAddress: contractAddress,\r\n    functionName: \"getReputation\",\r\n    abi: contractABIJson,\r\n    params: {\r\n      _address: walletAddress,\r\n      _categoryID: categoryId,\r\n    },\r\n  };\r\n\r\n  // the call to the contract\r\n  useEffect(() => {\r\n    async function getReputation() {\r\n      await Moralis.enableWeb3();\r\n      const result = await Moralis.executeFunction(options);\r\n      setReputation(result);\r\n    }\r\n\r\n    getReputation();\r\n  }, [votes, walletAddress, categoryId]);\r\n\r\n  return (\r\n    // returns a fragment\r\n    <>{reputationValue}</>\r\n  );\r\n};\r\n\r\nexport default Reputation;\r\n","import { useMoralisDapp } from \"providers/MoralisDappProvider/MoralisDappProvider\";\r\nimport { useState } from \"react\";\r\nimport Posts from \"./components/Posts\";\r\n\r\nimport { Avatar, Button } from \"antd\";\r\nimport glStyles from \"components/gstyles\";\r\nimport Blockie from \"components/Blockie\";\r\nimport AddPost from \"./components/AddPost\";\r\nimport Reputation from \"components/Reputation\";\r\n\r\nconst Feed = () => {\r\n  const { selectedCategory } = useMoralisDapp();\r\n  const [showAddPost, setShowAddPost] = useState(false);\r\n  let result = null;\r\n\r\n  function toggleShowAddPost() {\r\n    setShowAddPost(!showAddPost);\r\n  }\r\n\r\n  if (selectedCategory[\"category\"] === \"default\") {\r\n    result = (\r\n      <div className=\"col-lg-9\">\r\n        <h3> choose a category</h3>\r\n        <div\r\n          style={{\r\n            ...glStyles.card,\r\n            padding: \"10px 13px\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <p>feed this feed</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  } else {\r\n    result = (\r\n      <div className=\"col-lg-9\">\r\n        <div\r\n          style={{\r\n            ...glStyles.card,\r\n            padding: \"10px 13px\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-between\",\r\n          }}\r\n        >\r\n          <Avatar src={<Blockie currentWallet />} />\r\n          <h4>\r\n            {\" \"}\r\n            Your Reputation in {selectedCategory[\"category\"]} is <Reputation />{\" \"}\r\n          </h4>\r\n          <Button shape=\"round\" onClick={toggleShowAddPost}>\r\n            Post\r\n          </Button>\r\n        </div>\r\n        {/* if its true show it, otherwise show nothing */}\r\n        {showAddPost ? <AddPost /> : \"\"}\r\n        <Posts />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nexport default Feed;\r\n","import { useMoralisQuery } from \"react-moralis\";\r\nimport Categories from \"./Categories\";\r\nimport Feed from \"./Feed\";\r\n\r\n// es7 snippets \"rafce\"\r\n// react-arrow-function-component-element\r\nconst Main = () => {\r\n  const queryCategories = useMoralisQuery(\"Categories\");\r\n\r\n  // first stringify the data we fetch from the Query,\r\n  // then parse it into json?\r\n  const fetchedCategories = JSON.parse(\r\n    JSON.stringify(queryCategories.data, [\"categoryId\", \"category\"])\r\n  );\r\n\r\n  console.log(fetchedCategories);\r\n  return (\r\n    <div className=\"container\">\r\n      <h3>admin page *thx Moralis*</h3>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          fontFamily: \"Roboto, sans-serif\",\r\n          color: \"#041836\",\r\n          padding: \"10px 30px\",\r\n          maxWidth: \"1200px\",\r\n          width: \"100%\",\r\n          gap: \"20px\",\r\n        }}\r\n      >\r\n        <Categories categories={fetchedCategories} />\r\n        <Feed />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { Button, Card, Input, Typography, Form, notification } from \"antd\";\r\nimport { useMemo, useState } from \"react\";\r\nimport contractInfo from \"contracts/contractInfo.json\";\r\nimport Address from \"components/Address/Address\";\r\nimport { useMoralis, useMoralisQuery } from \"react-moralis\";\r\nimport { getEllipsisTxt } from \"helpers/formatters\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst { Text } = Typography;\r\n\r\nexport default function Contract() {\r\n  const { Moralis } = useMoralis();\r\n  const { contractName, networks, abi } = contractInfo;\r\n  const [responses, setResponses] = useState({});\r\n  const contractAddress = networks[1337].address;\r\n\r\n  /**Live query */\r\n  const { data } = useMoralisQuery(\"Events\", (query) => query, [], {\r\n    live: true,\r\n  });\r\n\r\n  useEffect(() => console.log(\"New data: \", data), [data]);\r\n\r\n  const displayedContractFunctions = useMemo(() => {\r\n    if (!abi) return [];\r\n    return abi.filter((method) => method[\"type\"] === \"function\");\r\n  }, [abi]);\r\n\r\n  const openNotification = ({ message, description }) => {\r\n    notification.open({\r\n      placement: \"bottomRight\",\r\n      message,\r\n      description,\r\n      onClick: () => {\r\n        console.log(\"Notification Clicked!\");\r\n      },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div style={{ margin: \"auto\", display: \"flex\", gap: \"20px\", marginTop: \"25\", width: \"70vw\" }}>\r\n      <Card\r\n        title={\r\n          <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\" }}>\r\n            Your contract: {contractName}\r\n            <Address avatar=\"left\" copyable address={contractAddress} size={8} />\r\n          </div>\r\n        }\r\n        size=\"large\"\r\n        style={{\r\n          width: \"60%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        <Form.Provider\r\n          onFormFinish={async (name, { forms }) => {\r\n            const params = forms[name].getFieldsValue();\r\n\r\n            let isView = false;\r\n\r\n            for (let method of abi) {\r\n              if (method.name !== name) continue;\r\n              if (method.stateMutability === \"view\") isView = true;\r\n            }\r\n\r\n            const options = {\r\n              contractAddress,\r\n              functionName: name,\r\n              abi,\r\n              params,\r\n            };\r\n\r\n            if (!isView) {\r\n              const tx = await Moralis.executeFunction({ awaitReceipt: false, ...options });\r\n              tx.on(\"transactionHash\", (hash) => {\r\n                setResponses({ ...responses, [name]: { result: null, isLoading: true } });\r\n                openNotification({\r\n                  message: \"🔊 New Transaction\",\r\n                  description: `${hash}`,\r\n                });\r\n                console.log(\"🔊 New Transaction\", hash);\r\n              })\r\n                .on(\"receipt\", (receipt) => {\r\n                  setResponses({ ...responses, [name]: { result: null, isLoading: false } });\r\n                  openNotification({\r\n                    message: \"📃 New Receipt\",\r\n                    description: `${receipt.transactionHash}`,\r\n                  });\r\n                  console.log(\"🔊 New Receipt: \", receipt);\r\n                })\r\n                .on(\"error\", (error) => {\r\n                  console.log(error);\r\n                });\r\n            } else {\r\n              Moralis.executeFunction(options).then((response) =>\r\n                setResponses({ ...responses, [name]: { result: response, isLoading: false } })\r\n              );\r\n            }\r\n          }}\r\n        >\r\n          {displayedContractFunctions &&\r\n            displayedContractFunctions.map((item, key) => (\r\n              <Card\r\n                title={`${key + 1}. ${item?.name}`}\r\n                size=\"small\"\r\n                style={{ marginBottom: \"20px\" }}\r\n              >\r\n                <Form layout=\"vertical\" name={`${item.name}`}>\r\n                  {item.inputs.map((input, key) => (\r\n                    <Form.Item\r\n                      label={`${input.name} (${input.type})`}\r\n                      name={`${input.name}`}\r\n                      required\r\n                      style={{ marginBottom: \"15px\" }}\r\n                    >\r\n                      <Input placeholder=\"input placeholder\" />\r\n                    </Form.Item>\r\n                  ))}\r\n                  <Form.Item style={{ marginBottom: \"5px\" }}>\r\n                    <Text style={{ display: \"block\" }}>\r\n                      {responses[item.name]?.result &&\r\n                        `Response: ${JSON.stringify(responses[item.name]?.result)}`}\r\n                    </Text>\r\n                    <Button\r\n                      type=\"primary\"\r\n                      htmlType=\"submit\"\r\n                      loading={responses[item?.name]?.isLoading}\r\n                    >\r\n                      {item.stateMutability === \"view\" ? \"Read🔎\" : \"Transact💸\"}\r\n                    </Button>\r\n                  </Form.Item>\r\n                </Form>\r\n              </Card>\r\n            ))}\r\n        </Form.Provider>\r\n      </Card>\r\n      <Card\r\n        title={\"Contract Events\"}\r\n        size=\"large\"\r\n        style={{\r\n          width: \"40%\",\r\n          boxShadow: \"0 0.5rem 1.2rem rgb(189 197 209 / 20%)\",\r\n          border: \"1px solid #e7eaf3\",\r\n          borderRadius: \"0.5rem\",\r\n        }}\r\n      >\r\n        {data.map((event, key) => (\r\n          <Card title={\"Transfer event\"} size=\"small\" style={{ marginBottom: \"20px\" }}>\r\n            {getEllipsisTxt(event.attributes.transaction_hash, 14)}\r\n          </Card>\r\n        ))}\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import { useEffect } from \"react\";\r\nimport { useMoralis } from \"react-moralis\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Redirect,\r\n  Route,\r\n  NavLink,\r\n} from \"react-router-dom\";\r\nimport Account from \"components/Account\";\r\nimport Chains from \"components/Chains\";\r\nimport ERC20Transfers from \"components/ERC20Transfers\";\r\n\r\nimport { Menu, Layout } from \"antd\";\r\nimport \"antd/dist/antd.css\";\r\nimport \"./style.css\";\r\nimport Main from \"components/Main\";\r\nimport Contract from \"components/Contract/Contract\";\r\n\r\nconst { Header, Footer } = Layout;\r\n\r\nconst styles = {\r\n  content: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    color: \"#041836\",\r\n    marginTop: \"130px\",\r\n    padding: \"10px\",\r\n  },\r\n  header: {\r\n    position: \"fixed\",\r\n    zIndex: 1,\r\n    width: \"100%\",\r\n    background: \"#fff\",\r\n    display: \"flex\",\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    fontFamily: \"Roboto, sans-serif\",\r\n    borderBottom: \"2px solid rgba(0, 0, 0, 0.06)\",\r\n    padding: \"0 10px\",\r\n    boxShadow: \"0 1px 10px rgb(151 164 175 / 10%)\",\r\n  },\r\n  headerRight: {\r\n    display: \"flex\",\r\n    gap: \"20px\",\r\n    alignItems: \"center\",\r\n    fontSize: \"15px\",\r\n    fontWeight: \"600\",\r\n  },\r\n};\r\nconst App = ({ isServerInfo }) => {\r\n  const { isWeb3Enabled, enableWeb3, isAuthenticated, isWeb3EnableLoading } =\r\n    useMoralis();\r\n\r\n  useEffect(() => {\r\n    if (isAuthenticated && !isWeb3Enabled && !isWeb3EnableLoading) enableWeb3();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isAuthenticated, isWeb3Enabled]);\r\n\r\n  return (\r\n    <Layout style={{ height: \"100vh\", overflow: \"auto\" }}>\r\n      <Router>\r\n        <Header style={styles.header}>\r\n          <Logo />\r\n          <Menu\r\n            theme=\"light\"\r\n            mode=\"horizontal\"\r\n            style={{\r\n              display: \"flex\",\r\n              fontSize: \"17px\",\r\n              fontWeight: \"500\",\r\n              width: \"100%\",\r\n              justifyContent: \"center\",\r\n            }}\r\n            defaultSelectedKeys={[\"contract\"]}\r\n          >\r\n            <Menu.Item key=\"transfers\">\r\n              <NavLink to=\"/erc20transfers\">💸 Transfers</NavLink>\r\n            </Menu.Item>\r\n            <Menu.Item key=\"contract\">\r\n              <NavLink to=\"/contract\">📄 Contract</NavLink>\r\n            </Menu.Item>\r\n          </Menu>\r\n\r\n          <div style={styles.headerRight}>\r\n            <Chains />\r\n            <Account />\r\n          </div>\r\n        </Header>\r\n        <div style={styles.content}>\r\n          <Switch>\r\n            <Route path=\"/erc20transfers\">\r\n              <ERC20Transfers />\r\n            </Route>\r\n            <Route path=\"/contract\">\r\n              <Contract />\r\n            </Route>\r\n            <Route path=\"/main\">\r\n              <Main />\r\n            </Route>\r\n            <Route path=\"/nonauthenticated\">\r\n              <h3>Please login using the \"Authenticate\" button</h3>\r\n            </Route>\r\n          </Switch>\r\n          {isAuthenticated ? (\r\n            <Redirect to=\"/main\" />\r\n          ) : (\r\n            <Redirect to=\"/nonauthenticated\" />\r\n          )}\r\n        </div>\r\n      </Router>\r\n      <Footer style={{ textAlign: \"center\" }}>\r\n        <new style={{ display: \"block\" }}>\r\n          ⭐️ Please star this{\" \"}\r\n          <a\r\n            href=\"https://github.com/tippi-fifestarr/tiled-hexagons/\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            boilerplate\r\n          </a>\r\n          , every star makes the Tippi very happy!\r\n        </new>\r\n\r\n        <new style={{ display: \"block\" }}>\r\n          🙋 You have questions? Ask them on the {\"\"}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://forum.moralis.io/t/ethereum-boilerplate-questions/3951/29\"\r\n          >\r\n            Moralis forum\r\n          </a>\r\n        </new>\r\n\r\n        <new style={{ display: \"block\" }}>\r\n          📖 Read the SHA-365 documentation{\" \"}\r\n          <a\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n            href=\"https://github.com/tippi-fifestarr/ChainlinkTeamFun/tree/master\"\r\n          >\r\n            about Dash-Bored and Tippi Fifestarr\r\n          </a>\r\n        </new>\r\n      </Footer>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport const Logo = () => (\r\n  <h4>\r\n    {\" \"}\r\n    <a class=\"link-dark\" href=\"./main\">\r\n      {\" \"}\r\n      SHA-365 (Admin)\r\n    </a>\r\n  </h4>\r\n);\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport { MoralisProvider } from \"react-moralis\";\r\nimport \"./index.css\";\r\nimport { MoralisDappProvider } from \"./providers/MoralisDappProvider/MoralisDappProvider\";\r\n\r\n/** Get your free Moralis Account https://moralis.io/ */\r\n\r\nconst APP_ID = process.env.REACT_APP_MORALIS_APPLICATION_ID;\r\nconst SERVER_URL = process.env.REACT_APP_MORALIS_SERVER_URL;\r\n\r\nconst Application = () => {\r\n  const isServerInfo = APP_ID && SERVER_URL ? true : false;\r\n  if (isServerInfo)\r\n    return (\r\n      <MoralisProvider appId={APP_ID} serverUrl={SERVER_URL}>\r\n        <MoralisDappProvider>\r\n          <App isServerInfo />\r\n        </MoralisDappProvider>\r\n      </MoralisProvider>\r\n    );\r\n};\r\n\r\nReactDOM.render(\r\n  // <React.StrictMode>\r\n  <Application />,\r\n  // </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}